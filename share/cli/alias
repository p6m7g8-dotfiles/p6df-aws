[toplevel]

whoami =
  !f() {
   . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload sts
    p6_aws_sts_caller_identity_get
  }; f

list-sgs =
  !f() {
   . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_sgs_list
  }; f

list-role-policies =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload iam
    p6_aws_iam_svc_role_policies
  }; f

list-roles =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload iam
    p6_aws_iam_svc_roles_list
  }; f

list-users =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload iam
    p6_aws_iam_svc_users_list
  }; f

list-instances =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_instances_list
  }; f

list-enis =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_eni_list
  }; f

list-ebs =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_volumes_list
  }; f

list-amis =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_amis_list
  }; f

list-vpcs =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_vpcs_list
  }; f

list-subnets =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload ec2
    p6_aws_ec2_svc_subnets_list
  }; f

bucket-policy =
  !f() {
    local bucket="$1"

    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload s3api
    p6_aws_s3_svc_bucket_policy "$bucket" | python -mjson.tool
  }; f

list-bucket =
  !f() {
    . $P6_DFZ_DATA_DIR/p6m7g8/p6aws/lib/util.sh
    p6_aws_util_cli_qload s3
    p6_aws_s3_svc_bucket_list
  }; f

# XXX: redo
list-sg-rules =
  !f() {
    sg_show.pl --security-group-id "$1"
  }; f

# XXX: refactor below
list-caches =
  !f() {
     aws --output text elasticache describe-cache-clusters --query "CacheClusters[].[CacheClusterStatus, PreferredAvailabilityZone, CacheNodeType, EngineVersion, Engine, CacheSubnetGroupName, ConfigurationEndpoint.Address]"
  }; f

list-elbs =
  !f() {
    aws --output text elb describe-load-balancers --query "LoadBalancerDescriptions[].[Scheme, LoadBalancerName, join(',', Subnets[]), join(',', AvailabilityZones[]), join(',', SecurityGroups[]), join(',',Instances[].InstanceId)]"
  }; f

list-elb-listeners =
  !f() {
    lb_listeners.pl --elb-id "$1"
  }; f

list-asgs =
  !f() {
    aws --output text autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[].[LoadBalancerNames[0], MinSize, MaxSize, DesiredCapacity, join(',', AvailabilityZones[]), AutoScalingGroupName]"
  }; f

list-asg-act =
  !f() {
    aws --output text autoscaling describe-scaling-activities --query "Activities[].[StatusCode, Description, Details, AutoScalingGroupName]"
  }; f

poll-last-cft =
  !f() {
    local stack_name=$(aws list-cfts | awk -v k=$USER '/_IN_/ {print $3}' | head -1)
    if [ -n "$stack_name" ]; then
	  aws list-cft-events $stack_name
    fi
  }; f

list-cft-events =
  !f() {
    local done=
    while [ -z "$done" ]; do
	echo "=====> `date`"
	aws --output text cloudformation describe-stack-events --stack-name $1 --query "StackEvents[].[ResourceStatus, ResourceType, PhysicalResourceId]"

	local output=$(aws --output text cloudformation describe-stack-events --stack-name $1 --query "StackEvents[].[ResourceStatus, ResourceType, PhysicalResourceId]")
	done=$(echo $output | grep "^CREATE_COMPLETE AWS::CloudFormation::Stack")
	sleep 5
    done
  }; f

list-cfts =
  !f() {
    aws --output text cloudformation describe-stacks --query "Stacks[*].[CreationTime, StackStatus, StackName]" | sort -k 1,1 -nr
  }; f

list-rdss =
  !f() {
    aws --output text rds describe-db-instances --query "DBInstances[].[DBInstanceClass, AvailabilityZone, MultiAZ, EngineVersion, DBInstanceStatus, join(',', DBSubnetGroup.Subnets[].SubnetIdentifier), join(',', DBSubnetGroup.Subnets[].SubnetAvailabilityZone.Name), Engine, DBParameterGroups[0].DBParameterGroupName, OptionGroupMemberships[0].OptionGroupName, DBInstanceIdentifier]"
  }; f

list-rds-snapshots =
  !f() {
    aws --output text rds describe-db-snapshots --query "DBSnapshots[].[VpcId, SnapshotCreateTime, AvailabilityZone, SnapshotType, Engine, EngineVersion, DBSnapshotIdentifier]"
  }; f

show-prefix =
  !f() {
    aws --output text ec2 describe-prefix-lists --query "PrefixLists[].[PrefixListId, PrefixListName, join(',', Cidrs[])]"
  }; f
